name: Supabase Preview Branch Management

on:
  pull_request:
    types: [opened, reopened, closed, synchronize]

env:
  SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
  SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}

jobs:
  create-preview-branch:
    name: Create Supabase Preview Branch
    runs-on: ubuntu-latest
    if: github.event.action == 'opened' || github.event.action == 'reopened'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: Install Supabase CLI
      run: |
        npm install -g supabase
        
    - name: Authenticate Supabase CLI
      run: |
        echo "üîë Authenticating with Supabase CLI..."
        echo "${{ secrets.SUPABASE_ACCESS_TOKEN }}" | npx supabase auth login --token --experimental
        
    - name: Create preview branch
      id: create-branch
      run: |
        echo "üåø Creating Supabase preview branch for PR #${{ github.event.number }}..."
        
        # Create branch name
        BRANCH_NAME="pr-${{ github.event.number }}"
        
        # Check if branch already exists
        if npx supabase branches show $BRANCH_NAME \
          --project-ref ${{ secrets.SUPABASE_PROJECT_ID }} \
          --experimental --json >/dev/null 2>&1; then
          echo "‚úÖ Branch already exists, reusing: $BRANCH_NAME"
        else
          # Create the branch with error handling
          if ! npx supabase branches create $BRANCH_NAME \
            --project-ref ${{ secrets.SUPABASE_PROJECT_ID }} \
            --experimental; then
            echo "‚ùå Failed to create Supabase branch"
            exit 1
          fi
          echo "‚úÖ Created new branch: $BRANCH_NAME"
        fi
        
        # Get branch details with validation
        BRANCH_DETAILS=$(npx supabase branches show $BRANCH_NAME \
          --project-ref ${{ secrets.SUPABASE_PROJECT_ID }} \
          --experimental --json)
        
        # Validate JSON before parsing
        if [ -z "$BRANCH_DETAILS" ] || ! echo "$BRANCH_DETAILS" | jq empty 2>/dev/null; then
          echo "‚ùå Invalid JSON response from Supabase: $BRANCH_DETAILS"
          exit 1
        fi
        
        # Extract URL and anon key with error checking
        BRANCH_URL=$(echo "$BRANCH_DETAILS" | jq -r '.url // empty')
        BRANCH_ANON_KEY=$(echo "$BRANCH_DETAILS" | jq -r '.anon_key // empty')
        
        if [ -z "$BRANCH_URL" ] || [ -z "$BRANCH_ANON_KEY" ]; then
          echo "‚ùå Missing required branch details"
          echo "Branch details: $BRANCH_DETAILS"
          exit 1
        fi
        
        # Output for next steps
        echo "branch_url=$BRANCH_URL" >> $GITHUB_OUTPUT
        echo "branch_anon_key=$BRANCH_ANON_KEY" >> $GITHUB_OUTPUT
        echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
        
        echo "‚úÖ Branch ready: $BRANCH_URL"
        
    - name: Update PR description with branch info
      uses: actions/github-script@v7
      with:
        script: |
          const branchUrl = '${{ steps.create-branch.outputs.branch_url }}';
          const branchName = '${{ steps.create-branch.outputs.branch_name }}';
          
          // Get current PR body
          const { data: pr } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          // Add branch info to PR description
          const branchInfo = `
          
          ---
          ### üåø Supabase Preview Branch
          - **Branch Name**: \`${branchName}\`
          - **Branch URL**: \`${branchUrl}\`
          - **Status**: ‚úÖ Active
          
          This preview branch will be automatically deleted when the PR is closed.
          `;
          
          // Update PR description
          await github.rest.pulls.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
            body: pr.body + branchInfo
          });
          
    - name: Set branch environment variables in Vercel
      run: |
        # This would require Vercel API integration
        # For now, document the values for manual setup
        echo "üìù Add these environment variables to your Vercel preview deployment:"
        echo "VITE_SUPABASE_URL=${{ steps.create-branch.outputs.branch_url }}"
        echo "VITE_SUPABASE_ANON_KEY=${{ steps.create-branch.outputs.branch_anon_key }}"
        
  sync-preview-branch:
    name: Sync Preview Branch Schema
    runs-on: ubuntu-latest
    if: github.event.action == 'synchronize'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: Install Supabase CLI
      run: |\n        go install github.com/supabase/cli@latest\n        echo \"$HOME/go/bin\" >> $GITHUB_PATH
      
    - name: Authenticate Supabase CLI
      run: |
        echo "üîë Authenticating with Supabase CLI..."
        echo "${{ secrets.SUPABASE_ACCESS_TOKEN }}" | npx supabase auth login --token --experimental
      
    - name: Sync branch with latest migrations
      run: |
        echo "üîÑ Syncing preview branch with latest schema..."
        
        BRANCH_NAME="pr-${{ github.event.number }}"
        
        # Check if branch exists before syncing
        if ! npx supabase branches show $BRANCH_NAME \
          --project-ref ${{ secrets.SUPABASE_PROJECT_ID }} \
          --experimental --json >/dev/null 2>&1; then
          echo "‚ùå Preview branch does not exist: $BRANCH_NAME"
          exit 1
        fi
        
        # Push migrations to branch with error handling
        if ! npx supabase db push \
          --branch $BRANCH_NAME \
          --project-ref ${{ secrets.SUPABASE_PROJECT_ID }} \
          --experimental; then
          echo "‚ùå Failed to sync schema with preview branch"
          exit 1
        fi
          
        echo "‚úÖ Preview branch synced with latest migrations"
        
  cleanup-preview-branch:
    name: Cleanup Supabase Preview Branch
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'
    
    steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: Install Supabase CLI
      run: |\n        go install github.com/supabase/cli@latest\n        echo \"$HOME/go/bin\" >> $GITHUB_PATH
      
    - name: Authenticate Supabase CLI
      run: |
        echo "üîë Authenticating with Supabase CLI..."
        echo "${{ secrets.SUPABASE_ACCESS_TOKEN }}" | npx supabase auth login --token --experimental
      
    - name: Delete preview branch
      run: |
        echo "üßπ Cleaning up Supabase preview branch for PR #${{ github.event.number }}..."
        
        BRANCH_NAME="pr-${{ github.event.number }}"
        
        # Check if branch exists before trying to delete
        if npx supabase branches show $BRANCH_NAME \
          --project-ref ${{ secrets.SUPABASE_PROJECT_ID }} \
          --experimental --json >/dev/null 2>&1; then
          
          # Delete the branch
          if npx supabase branches delete $BRANCH_NAME \
            --project-ref ${{ secrets.SUPABASE_PROJECT_ID }} \
            --experimental --confirm; then
            echo "‚úÖ Preview branch deleted: $BRANCH_NAME"
          else
            echo "‚ö†Ô∏è Failed to delete branch, but continuing..."
          fi
        else
          echo "‚ÑπÔ∏è Branch already deleted or does not exist: $BRANCH_NAME"
        fi
        
    - name: Comment on PR
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: 'üßπ Supabase preview branch has been cleaned up.'
          });