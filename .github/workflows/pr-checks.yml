name: Pull Request Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main, develop ]

# Ensure only one workflow runs per PR
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      tests: ${{ steps.changes.outputs.tests }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          frontend:
            - 'src/**'
            - 'package*.json'
            - 'vite.config.ts'
            - 'tsconfig.json'
          tests:
            - 'src/test/**'
            - 'vitest.config.ts'

  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Check TypeScript
      run: npx tsc --noEmit

  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.tests == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm run test:run
      
    - name: Generate coverage
      run: npm run test:coverage
      
    - name: Comment PR with test results
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const fs = require('fs');
          let coverage = '';
          
          try {
            const coverageData = JSON.parse(fs.readFileSync('./coverage/coverage-final.json', 'utf8'));
            const summary = coverageData.total;
            coverage = `
          ## 📊 Test Coverage Report
          
          | Metric | Coverage |
          |--------|----------|
          | Lines | ${summary.lines.pct}% |
          | Functions | ${summary.functions.pct}% |
          | Branches | ${summary.branches.pct}% |
          | Statements | ${summary.statements.pct}% |
          `;
          } catch (error) {
            coverage = '## ❌ Coverage report not available';
          }
          
          const comment = `
          ## ✅ Test Suite Results
          
          All tests are passing! 🎉
          
          ${coverage}
          
          - **Total Tests**: Check the logs for detailed test count
          - **Status**: ✅ All tests passed
          - **Node.js**: 20.x
          
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Check build size
      run: |
        echo "📦 Build size information:"
        du -sh dist/
        find dist/ -name "*.js" -exec basename {} \; | head -10

  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [lint-and-format, test-suite, build-check]
    if: always()
    
    steps:
    - name: Create PR summary
      uses: actions/github-script@v7
      with:
        script: |
          const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId,
          });
          
          const jobStatuses = jobs.jobs.reduce((acc, job) => {
            if (job.name !== 'PR Summary') {
              acc[job.name] = job.conclusion || job.status;
            }
            return acc;
          }, {});
          
          const statusEmoji = {
            'success': '✅',
            'failure': '❌',
            'cancelled': '🚫',
            'skipped': '⏭️',
            'in_progress': '🔄'
          };
          
          let summary = '## 🔍 Pull Request Checks Summary\n\n';
          
          Object.entries(jobStatuses).forEach(([job, status]) => {
            const emoji = statusEmoji[status] || '❓';
            summary += `${emoji} **${job}**: ${status}\n`;
          });
          
          const allPassed = Object.values(jobStatuses).every(status => 
            status === 'success' || status === 'skipped'
          );
          
          if (allPassed) {
            summary += '\n🎉 **All checks passed!** This PR is ready for review.';
          } else {
            summary += '\n⚠️ **Some checks failed.** Please review and fix any issues.';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });