name: Security & Dependency Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security checks weekly on Mondays at 3 AM UTC
    - cron: '0 3 * * 1'

jobs:
  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: |
        echo "üîç Running npm audit..."
        npm audit --audit-level=moderate
        
    - name: Check for high/critical vulnerabilities
      run: |
        echo "üîç Checking for high/critical vulnerabilities..."
        AUDIT_RESULT=$(npm audit --audit-level=high --json || true)
        
        if echo "$AUDIT_RESULT" | grep -q '"level": "high"' || echo "$AUDIT_RESULT" | grep -q '"level": "critical"'; then
          echo "‚ùå High or critical vulnerabilities found!"
          echo "$AUDIT_RESULT" | jq '.vulnerabilities'
          exit 1
        else
          echo "‚úÖ No high or critical vulnerabilities found"
        fi
        
    - name: Generate dependency report
      run: |
        echo "üì¶ Generating dependency report..."
        npm list --depth=0 > dependency-report.txt
        echo "Total dependencies: $(npm list --depth=0 --parseable | wc -l)"
        
    - name: Upload security artifacts
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: |
          dependency-report.txt
        retention-days: 30

  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript-typescript
        queries: security-and-quality
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build for analysis
      run: npm run build
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run secret detection
      run: |
        echo "üîç Scanning for potential secrets..."
        
        # Check for common secret patterns
        SECRETS_FOUND=false
        
        # Check for API keys, tokens, etc.
        if grep -r -E "(api[_-]?key|secret[_-]?key|access[_-]?token|private[_-]?key)" --exclude-dir=node_modules --exclude-dir=.git . | grep -v "test" | grep -v "example" | grep -v "placeholder"; then
          echo "‚ö†Ô∏è Potential secrets found in code"
          SECRETS_FOUND=true
        fi
        
        # Check for hardcoded credentials
        if grep -r -E "(password\s*=|pwd\s*=|token\s*=)" --exclude-dir=node_modules --exclude-dir=.git . | grep -v "test" | grep -v "example"; then
          echo "‚ö†Ô∏è Potential hardcoded credentials found"
          SECRETS_FOUND=true
        fi
        
        if [ "$SECRETS_FOUND" = true ]; then
          echo "‚ùå Security scan failed - potential secrets detected"
          echo "Please review the files above and ensure no real secrets are committed"
          exit 1
        else
          echo "‚úÖ No obvious secrets detected"
        fi

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install license checker
      run: npm install -g license-checker
      
    - name: Install dependencies
      run: npm ci
      
    - name: Check licenses
      run: |
        echo "üìÑ Checking dependency licenses..."
        license-checker --summary
        
        # Generate detailed license report
        license-checker --json > license-report.json
        
        # Check for problematic licenses
        RESTRICTED_LICENSES="GPL-3.0,AGPL-3.0,LGPL-3.0"
        
        if license-checker --failOn "$RESTRICTED_LICENSES" --excludePrivatePackages; then
          echo "‚úÖ No restricted licenses found"
        else
          echo "‚ùå Restricted licenses detected!"
          echo "Please review and replace packages with restricted licenses"
          exit 1
        fi
        
    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: license-report.json
        retention-days: 30

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-audit, secret-scan, license-check]
    if: always()
    
    steps:
    - name: Create security summary
      run: |
        echo "üõ°Ô∏è Security Scan Summary"
        echo "========================"
        echo ""
        echo "Dependency Audit: ${{ needs.dependency-audit.result }}"
        echo "Secret Scan: ${{ needs.secret-scan.result }}"
        echo "License Check: ${{ needs.license-check.result }}"
        echo ""
        
        if [[ "${{ needs.dependency-audit.result }}" == "success" && \
              "${{ needs.secret-scan.result }}" == "success" && \
              "${{ needs.license-check.result }}" == "success" ]]; then
          echo "‚úÖ All security checks passed!"
        else
          echo "‚ùå Some security checks failed. Please review the results."
        fi