name: Deployment with Test Gates

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

# Prevent multiple deployments running simultaneously
concurrency:
  group: deployment-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # =====================================
  # PHASE 1: QUALITY GATES
  # =====================================
  
  pre-deployment-tests:
    name: Pre-Deployment Test Suite
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Verify test configuration
      run: |
        echo "üîç Verifying test configuration..."
        if [ ! -f "vitest.config.ts" ]; then
          echo "‚ùå Test configuration missing!"
          exit 1
        fi
        echo "‚úÖ Test configuration found"
        
    - name: Run comprehensive test suite
      run: |
        echo "üß™ Running comprehensive test suite..."
        npm run test:run
        
    - name: Generate and validate coverage
      run: |
        echo "üìä Generating test coverage..."
        npm run test:coverage
        
        # Validate coverage meets deployment criteria
        node -e "
          const coverage = require('./coverage/coverage-final.json');
          const total = coverage.total;
          
          // Deployment requires higher thresholds
          const deploymentThresholds = {
            statements: 50,
            branches: 40,
            functions: 50,
            lines: 50
          };
          
          console.log('üìä Coverage Report:');
          console.log('==================');
          
          let allPassed = true;
          Object.entries(deploymentThresholds).forEach(([metric, threshold]) => {
            const actual = total[metric].pct;
            const status = actual >= threshold ? '‚úÖ' : '‚ùå';
            console.log(\`\${status} \${metric}: \${actual}% (required: \${threshold}%)\`);
            
            if (actual < threshold) {
              allPassed = false;
            }
          });
          
          if (!allPassed) {
            console.log('\\n‚ùå DEPLOYMENT BLOCKED: Coverage thresholds not met');
            console.log('Please improve test coverage before deploying to production');
            process.exit(1);
          } else {
            console.log('\\n‚úÖ Coverage requirements met for deployment');
          }
        "
        
    - name: Verify critical test categories
      run: |
        echo "üéØ Verifying critical test categories..."
        
        # Count tests by category
        UNIT_TESTS=$(find src/test/utils src/test/stores -name "*.test.*" 2>/dev/null | wc -l)
        COMPONENT_TESTS=$(find src/test/components -name "*.test.*" 2>/dev/null | wc -l)
        INTEGRATION_TESTS=$(find src/test/integration -name "*.test.*" 2>/dev/null | wc -l)
        
        echo "Unit tests: $UNIT_TESTS"
        echo "Component tests: $COMPONENT_TESTS"  
        echo "Integration tests: $INTEGRATION_TESTS"
        
        # Require minimum tests in each category
        if [ "$UNIT_TESTS" -lt 2 ]; then
          echo "‚ùå Insufficient unit tests ($UNIT_TESTS < 2)"
          exit 1
        fi
        
        if [ "$COMPONENT_TESTS" -lt 1 ]; then
          echo "‚ùå Insufficient component tests ($COMPONENT_TESTS < 1)"
          exit 1
        fi
        
        if [ "$INTEGRATION_TESTS" -lt 1 ]; then
          echo "‚ùå Insufficient integration tests ($INTEGRATION_TESTS < 1)"
          exit 1
        fi
        
        echo "‚úÖ All test categories have sufficient coverage"
        
    - name: Upload pre-deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pre-deployment-test-results
        path: |
          coverage/
        retention-days: 7

  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    needs: pre-deployment-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Type checking
      run: |
        echo "üîç Running TypeScript type checking..."
        npx tsc --noEmit
        
    - name: Lint checking
      run: |
        echo "üîç Running ESLint..."
        npm run lint
        
    - name: Build application
      run: |
        echo "üèóÔ∏è Building application..."
        npm run build
        
    - name: Validate build output
      run: |
        echo "üîç Validating build output..."
        
        if [ ! -d "dist" ]; then
          echo "‚ùå Build directory not found!"
          exit 1
        fi
        
        # Check for essential files
        if [ ! -f "dist/index.html" ]; then
          echo "‚ùå index.html not found in build!"
          exit 1
        fi
        
        # Check build size
        BUILD_SIZE=$(du -sh dist/ | cut -f1)
        echo "üì¶ Build size: $BUILD_SIZE"
        
        # Basic bundle analysis
        echo "üìä Bundle contents:"
        ls -la dist/
        
        echo "‚úÖ Build validation successful"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: validated-build
        path: dist/
        retention-days: 7

  # =====================================
  # PHASE 2: SECURITY VALIDATION
  # =====================================
  
  security-validation:
    name: Security Validation
    runs-on: ubuntu-latest
    needs: build-validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Security audit
      run: |
        echo "üõ°Ô∏è Running security audit..."
        npm audit --audit-level=high
        
    - name: Check for secrets
      run: |
        echo "üîç Scanning for secrets..."
        # Basic secret scanning
        if grep -r -E "(VITE_SUPABASE_ANON_KEY|VITE_SUPABASE_URL)" src/ | grep -v "import.meta.env"; then
          echo "‚ùå Hardcoded secrets detected!"
          exit 1
        fi
        echo "‚úÖ No hardcoded secrets found"

  # =====================================
  # PHASE 3: DEPLOYMENT
  # =====================================
  
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [pre-deployment-tests, build-validation, security-validation]
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Download validated build
      uses: actions/download-artifact@v4
      with:
        name: validated-build
        path: dist/
        
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "‚úÖ All quality gates passed - deployment approved"
        echo "üì¶ Deploying validated build artifacts"
        
        # Add your actual staging deployment commands here
        # Examples:
        # - Deploy to Netlify: netlify deploy --prod --dir=dist
        # - Deploy to S3: aws s3 sync dist/ s3://your-bucket/
        # - Deploy to your custom hosting provider
        
        echo "üéâ Staging deployment completed successfully"
        
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deployment-tests, build-validation, security-validation]
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
    - name: Download validated build
      uses: actions/download-artifact@v4
      with:
        name: validated-build
        path: dist/
        
    - name: Final production checks
      run: |
        echo "üîç Final production readiness checks..."
        
        # Verify build artifacts exist
        if [ ! -f "dist/index.html" ]; then
          echo "‚ùå Production deployment failed - missing build artifacts"
          exit 1
        fi
        
        echo "‚úÖ Production readiness verified"
        
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        echo "‚úÖ All quality gates passed - production deployment approved"
        echo "üì¶ Deploying validated build artifacts"
        
        # Add your actual production deployment commands here
        # Examples:
        # - Deploy to Netlify: netlify deploy --prod --dir=dist
        # - Deploy to S3: aws s3 sync dist/ s3://your-production-bucket/
        # - Deploy to your custom hosting provider
        
        echo "üéâ Production deployment completed successfully"
        
    - name: Post-deployment verification
      run: |
        echo "üîç Post-deployment verification..."
        
        # Add health checks here
        # Examples:
        # - curl your-production-url/health
        # - Run smoke tests
        
        echo "‚úÖ Post-deployment verification passed"

  # =====================================
  # PHASE 4: NOTIFICATIONS
  # =====================================
  
  notify-deployment:
    name: Deployment Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Deployment summary
      run: |
        echo "üìã Deployment Summary"
        echo "===================="
        echo "Staging: ${{ needs.deploy-staging.result }}"
        echo "Production: ${{ needs.deploy-production.result }}"
        
        # Add notification logic here
        # Examples:
        # - Slack notification
        # - Discord webhook
        # - Email notification
        # - Update deployment dashboard