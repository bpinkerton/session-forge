name: Vercel Preview Deployment

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  test-before-preview:
    name: Run Tests Before Preview
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm run test:run
      
    - name: Run linter
      run: npm run lint
      continue-on-error: true  # Don't block preview on lint warnings
      
    - name: Type check
      run: npx tsc --noEmit
      
  deploy-preview:
    name: Deploy Preview to Vercel
    runs-on: ubuntu-latest
    needs: test-before-preview
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get Supabase preview branch details
      id: branch-info
      run: |
        # Install Supabase CLI if needed
        npm install -g supabase
        
        # Get branch details
        BRANCH_NAME="pr-${{ github.event.number }}"
        
        # Check if branch exists
        BRANCH_EXISTS=$(npx supabase branches list \
          --project-ref ${{ secrets.SUPABASE_PROJECT_ID }} \
          --experimental --json | jq -r ".[] | select(.name == \"$BRANCH_NAME\") | .name")
        
        if [ -n "$BRANCH_EXISTS" ]; then
          # Get branch details
          BRANCH_DETAILS=$(npx supabase branches show $BRANCH_NAME \
            --project-ref ${{ secrets.SUPABASE_PROJECT_ID }} \
            --experimental --json)
          
          BRANCH_URL=$(echo $BRANCH_DETAILS | jq -r '.url')
          BRANCH_ANON_KEY=$(echo $BRANCH_DETAILS | jq -r '.anon_key')
          
          echo "branch_url=$BRANCH_URL" >> $GITHUB_OUTPUT
          echo "branch_anon_key=$BRANCH_ANON_KEY" >> $GITHUB_OUTPUT
          echo "branch_exists=true" >> $GITHUB_OUTPUT
        else
          # Use staging branch as fallback
          echo "branch_exists=false" >> $GITHUB_OUTPUT
          echo "⚠️ No preview branch found, will use staging environment"
        fi
      
    - name: Install Vercel CLI
      run: npm install --global vercel@latest
      
    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      
    - name: Build Project Artifacts
      env:
        VITE_SUPABASE_URL: ${{ steps.branch-info.outputs.branch_exists == 'true' && steps.branch-info.outputs.branch_url || secrets.STAGING_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ steps.branch-info.outputs.branch_exists == 'true' && steps.branch-info.outputs.branch_anon_key || secrets.STAGING_SUPABASE_ANON_KEY }}
      run: |
        echo "🔨 Building with Supabase branch: ${{ steps.branch-info.outputs.branch_exists == 'true' && 'preview' || 'staging' }}"
        vercel build --token=${{ secrets.VERCEL_TOKEN }}
      
    - name: Deploy Preview to Vercel
      id: deploy
      run: |
        echo "🚀 Deploying preview to Vercel..."
        DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
        echo "DEPLOYMENT_URL=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
        echo "✅ Preview deployed to: $DEPLOYMENT_URL"
        
    - name: Comment PR with Preview URL
      uses: actions/github-script@v7
      with:
        script: |
          const deploymentUrl = '${{ steps.deploy.outputs.DEPLOYMENT_URL }}';
          const comment = `🚀 **Preview Deployment Ready!**
          
          - Preview URL: ${deploymentUrl}
          - All tests passed ✅
          
          This preview will be updated automatically as you push new commits.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });