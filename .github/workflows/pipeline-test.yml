name: Pipeline Integration Test

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of test to run'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - supabase-only
        - vercel-only
        - secrets-check

jobs:
  secrets-validation:
    name: Validate Required Secrets
    runs-on: ubuntu-latest
    
    steps:
    - name: Check required secrets
      run: |
        echo "🔍 Validating required secrets..."
        
        # Check Supabase secrets
        if [ -z "${{ secrets.SUPABASE_ACCESS_TOKEN }}" ]; then
          echo "❌ Missing SUPABASE_ACCESS_TOKEN"
          exit 1
        else
          echo "✅ SUPABASE_ACCESS_TOKEN configured"
        fi
        
        if [ -z "${{ secrets.SUPABASE_PROJECT_ID }}" ]; then
          echo "❌ Missing SUPABASE_PROJECT_ID"
          exit 1
        else
          echo "✅ SUPABASE_PROJECT_ID configured"
        fi
        
        # Check Vercel secrets
        if [ -z "${{ secrets.VERCEL_TOKEN }}" ]; then
          echo "❌ Missing VERCEL_TOKEN"
          exit 1
        else
          echo "✅ VERCEL_TOKEN configured"
        fi
        
        if [ -z "${{ secrets.VERCEL_ORG_ID }}" ]; then
          echo "❌ Missing VERCEL_ORG_ID"
          exit 1
        else
          echo "✅ VERCEL_ORG_ID configured"
        fi
        
        if [ -z "${{ secrets.VERCEL_PROJECT_ID }}" ]; then
          echo "❌ Missing VERCEL_PROJECT_ID"
          exit 1
        else
          echo "✅ VERCEL_PROJECT_ID configured"
        fi
        
        # Check staging fallback secrets
        if [ -z "${{ secrets.STAGING_SUPABASE_URL }}" ]; then
          echo "⚠️ Missing STAGING_SUPABASE_URL (preview will fail if Supabase branch unavailable)"
        else
          echo "✅ STAGING_SUPABASE_URL configured"
        fi
        
        if [ -z "${{ secrets.STAGING_SUPABASE_ANON_KEY }}" ]; then
          echo "⚠️ Missing STAGING_SUPABASE_ANON_KEY (preview will fail if Supabase branch unavailable)"
        else
          echo "✅ STAGING_SUPABASE_ANON_KEY configured"
        fi
        
        echo "🎉 Secret validation complete!"

  test-supabase-cli:
    name: Test Supabase CLI Connection
    runs-on: ubuntu-latest
    needs: secrets-validation
    if: github.event.inputs.test_type == 'full' || github.event.inputs.test_type == 'supabase-only'
    
    steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        
    - name: Install Supabase CLI
      run: |\n        go install github.com/supabase/cli@latest\n        echo \"$HOME/go/bin\" >> $GITHUB_PATH
      
    - name: Test Supabase authentication
      run: |
        echo "🔑 Testing Supabase CLI authentication..."
        echo "${{ secrets.SUPABASE_ACCESS_TOKEN }}" | npx supabase auth login --token --experimental
        echo "✅ Supabase authentication successful"
        
    - name: Test project access
      run: |
        echo "🔍 Testing project access..."
        npx supabase projects list --experimental
        echo "✅ Project access confirmed"
        
    - name: Test branch operations
      run: |
        echo "🌿 Testing branch operations..."
        
        # List existing branches
        echo "Listing existing branches:"
        npx supabase branches list --project-ref ${{ secrets.SUPABASE_PROJECT_ID }} --experimental --json
        
        # Test creating a test branch
        TEST_BRANCH="test-pipeline-$(date +%s)"
        echo "Creating test branch: $TEST_BRANCH"
        
        if npx supabase branches create $TEST_BRANCH \
          --project-ref ${{ secrets.SUPABASE_PROJECT_ID }} \
          --experimental; then
          echo "✅ Test branch created successfully"
          
          # Test getting branch details
          BRANCH_DETAILS=$(npx supabase branches show $TEST_BRANCH \
            --project-ref ${{ secrets.SUPABASE_PROJECT_ID }} \
            --experimental --json)
          
          echo "Branch details: $BRANCH_DETAILS"
          
          # Validate we can extract URL and anon key
          BRANCH_URL=$(echo "$BRANCH_DETAILS" | jq -r '.url // empty')
          BRANCH_ANON_KEY=$(echo "$BRANCH_DETAILS" | jq -r '.anon_key // empty')
          
          if [ -n "$BRANCH_URL" ] && [ -n "$BRANCH_ANON_KEY" ]; then
            echo "✅ Branch details extracted successfully"
            echo "Branch URL: $BRANCH_URL"
            echo "Anon key length: ${#BRANCH_ANON_KEY}"
          else
            echo "❌ Failed to extract branch details"
            exit 1
          fi
          
          # Clean up test branch
          npx supabase branches delete $TEST_BRANCH \
            --project-ref ${{ secrets.SUPABASE_PROJECT_ID }} \
            --experimental --confirm
          echo "✅ Test branch cleaned up"
        else
          echo "❌ Failed to create test branch"
          exit 1
        fi

  test-vercel-cli:
    name: Test Vercel CLI Connection
    runs-on: ubuntu-latest
    needs: secrets-validation
    if: github.event.inputs.test_type == 'full' || github.event.inputs.test_type == 'vercel-only'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Vercel CLI
      run: npm install --global vercel@latest
      
    - name: Test Vercel authentication
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      run: |
        echo "🔑 Testing Vercel CLI authentication..."
        vercel whoami --token=${{ secrets.VERCEL_TOKEN }}
        echo "✅ Vercel authentication successful"
        
    - name: Test project access
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      run: |
        echo "🔍 Testing Vercel project access..."
        vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
        echo "✅ Vercel project access confirmed"
        
    - name: Test build process
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        VITE_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
      run: |
        echo "🔨 Testing Vercel build process..."
        vercel build --token=${{ secrets.VERCEL_TOKEN }}
        echo "✅ Vercel build successful"

  integration-test:
    name: Full Integration Test
    runs-on: ubuntu-latest
    needs: [test-supabase-cli, test-vercel-cli]
    if: github.event.inputs.test_type == 'full' && !failure()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install CLIs
      run: |
        go install github.com/supabase/cli@latest
        echo "$HOME/go/bin" >> $GITHUB_PATH
        npm install --global vercel@latest
        
    - name: Authenticate services
      run: |
        echo "🔑 Authenticating with both services..."
        echo "${{ secrets.SUPABASE_ACCESS_TOKEN }}" | npx supabase auth login --token --experimental
        vercel whoami --token=${{ secrets.VERCEL_TOKEN }}
        echo "✅ Both services authenticated"
        
    - name: Create test preview branch
      id: create-branch
      run: |
        echo "🌿 Creating test preview branch..."
        
        TEST_BRANCH="integration-test-$(date +%s)"
        
        # Create branch
        npx supabase branches create $TEST_BRANCH \
          --project-ref ${{ secrets.SUPABASE_PROJECT_ID }} \
          --experimental
        
        # Get branch details
        BRANCH_DETAILS=$(npx supabase branches show $TEST_BRANCH \
          --project-ref ${{ secrets.SUPABASE_PROJECT_ID }} \
          --experimental --json)
        
        BRANCH_URL=$(echo "$BRANCH_DETAILS" | jq -r '.url')
        BRANCH_ANON_KEY=$(echo "$BRANCH_DETAILS" | jq -r '.anon_key')
        
        echo "branch_name=$TEST_BRANCH" >> $GITHUB_OUTPUT
        echo "branch_url=$BRANCH_URL" >> $GITHUB_OUTPUT
        echo "branch_anon_key=$BRANCH_ANON_KEY" >> $GITHUB_OUTPUT
        
        echo "✅ Test branch created: $BRANCH_URL"
        
    - name: Test deployment with preview branch
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        VITE_SUPABASE_URL: ${{ steps.create-branch.outputs.branch_url }}
        VITE_SUPABASE_ANON_KEY: ${{ steps.create-branch.outputs.branch_anon_key }}
      run: |
        echo "🚀 Testing deployment with preview branch..."
        
        # Pull Vercel config
        vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
        
        # Build with preview branch
        vercel build --token=${{ secrets.VERCEL_TOKEN }}
        
        echo "✅ Deployment test successful with preview branch"
        
    - name: Cleanup test branch
      if: always()
      run: |
        if [ -n "${{ steps.create-branch.outputs.branch_name }}" ]; then
          echo "🧹 Cleaning up test branch..."
          npx supabase branches delete ${{ steps.create-branch.outputs.branch_name }} \
            --project-ref ${{ secrets.SUPABASE_PROJECT_ID }} \
            --experimental --confirm || echo "Branch cleanup failed, but continuing..."
        fi
        
    - name: Integration test summary
      if: always()
      run: |
        echo "📋 Integration Test Results"
        echo "=========================="
        echo "✅ Supabase CLI: Working"
        echo "✅ Vercel CLI: Working"
        echo "✅ Branch Creation: Working"
        echo "✅ Branch Details: Working"
        echo "✅ Build Process: Working"
        echo "✅ Environment Variables: Working"
        echo ""
        echo "🎉 All integration tests passed!"
        echo "Your pipeline is ready for preview deployments!"