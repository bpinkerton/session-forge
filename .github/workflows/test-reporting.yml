name: Test Reporting

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  comprehensive-testing:
    name: Comprehensive Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests with coverage
      run: npm run test:coverage
      
    - name: Generate detailed test report
      run: |
        echo "# Test Report - Node.js ${{ matrix.node-version }}" > test-report-${{ matrix.node-version }}.md
        echo "" >> test-report-${{ matrix.node-version }}.md
        echo "## Test Execution Summary" >> test-report-${{ matrix.node-version }}.md
        echo "- **Node Version**: ${{ matrix.node-version }}" >> test-report-${{ matrix.node-version }}.md
        echo "- **Date**: $(date)" >> test-report-${{ matrix.node-version }}.md
        echo "- **Commit**: ${{ github.sha }}" >> test-report-${{ matrix.node-version }}.md
        echo "" >> test-report-${{ matrix.node-version }}.md
        echo "## Coverage Summary" >> test-report-${{ matrix.node-version }}.md
        
        # Extract coverage summary if available
        if [ -f coverage/coverage-final.json ]; then
          node -e "
            const coverage = require('./coverage/coverage-final.json');
            const total = coverage.total;
            console.log('| Metric | Coverage |');
            console.log('|--------|----------|');
            console.log('| Lines | ' + total.lines.pct + '% (' + total.lines.covered + '/' + total.lines.total + ') |');
            console.log('| Functions | ' + total.functions.pct + '% (' + total.functions.covered + '/' + total.functions.total + ') |');
            console.log('| Branches | ' + total.branches.pct + '% (' + total.branches.covered + '/' + total.branches.total + ') |');
            console.log('| Statements | ' + total.statements.pct + '% (' + total.statements.covered + '/' + total.statements.total + ') |');
          " >> test-report-${{ matrix.node-version }}.md
        fi
        
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      with:
        name: test-results-node-${{ matrix.node-version }}
        path: |
          coverage/
          test-report-${{ matrix.node-version }}.md
        retention-days: 30
        
    - name: Comment on PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const reportFile = `test-report-${{ matrix.node-version }}.md`;
          
          if (fs.existsSync(reportFile)) {
            const report = fs.readFileSync(reportFile, 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üß™ Test Results (Node.js ${{ matrix.node-version }})\n\n${report}`
            });
          }

  test-quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: comprehensive-testing
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests with coverage
      run: npm run test:coverage
      
    - name: Enforce coverage thresholds
      run: |
        # Check if coverage meets minimum thresholds
        node -e "
          const coverage = require('./coverage/coverage-final.json');
          const total = coverage.total;
          
          const thresholds = {
            lines: 70,
            functions: 70, 
            branches: 70,
            statements: 70
          };
          
          let failed = false;
          
          Object.entries(thresholds).forEach(([metric, threshold]) => {
            const actual = total[metric].pct;
            if (actual < threshold) {
              console.error(\`‚ùå \${metric} coverage \${actual}% is below threshold \${threshold}%\`);
              failed = true;
            } else {
              console.log(\`‚úÖ \${metric} coverage \${actual}% meets threshold \${threshold}%\`);
            }
          });
          
          if (failed) {
            console.error('\\n‚ùå Coverage thresholds not met. Please add more tests.');
            process.exit(1);
          } else {
            console.log('\\nüéâ All coverage thresholds met!');
          }
        "
        
    - name: Check test count
      run: |
        # Ensure we have a reasonable number of tests
        npm run test:run 2>&1 | tee test-output.log
        
        # Extract test count (adjust grep pattern based on your test runner output)
        TEST_COUNT=$(grep -o '[0-9]* passed' test-output.log | head -1 | grep -o '[0-9]*' || echo "0")
        
        echo "Total tests: $TEST_COUNT"
        
        if [ "$TEST_COUNT" -lt 30 ]; then
          echo "‚ùå Test count ($TEST_COUNT) is below minimum requirement (30)"
          exit 1
        else
          echo "‚úÖ Test count ($TEST_COUNT) meets minimum requirement"
        fi

  notify-team:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [comprehensive-testing, test-quality-gates]
    if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Notify on test failures
      run: |
        echo "üö® Test failures detected in ${{ github.ref }}"
        echo "Please check the failed jobs and fix any issues."
        # Add notification logic here (Slack, Discord, email, etc.)
        # Example:
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"üö® SessionForge tests failed on ${{ github.ref }}!"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}